<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<sub-flow name="messengerBotProcessAPIImplementationSubFlow" doc:id="489658a8-6474-43b6-9fda-2fe7225b18fe" >
		<set-variable value="#[payload]" doc:name="setInputPayload" doc:id="c4dcd13d-da61-41e7-a8d0-ef6c71b78ca6" variableName="inputPayload"/>
		<choice doc:name="Choice" doc:id="06388da9-c6b0-4dc8-8bbf-5041ad2d9e5c" >
			<when expression="#[//subscribe&#10;vars.inputPayload.message == '/subscribe']">
				<http:request method="POST" doc:name="startCommunication" doc:id="a6143510-a51c-48b8-8091-b1281ab49e2f" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body ><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'Hello, please write one cryptocurrency symbol about which you want to get notifications, and the price you bought it for, and number of cryptocurrencies separated by comma as in the example: BTC, 16000, 1.642657'
}]]]></http:body>
				</http:request>
			</when>
			<when expression='#[//receive symbol, price, number&#10;import * from dw::core::Strings&#10;var symbol = trim((vars.inputPayload.message splitBy(/[,]/))[0])&#10;var price = trim((vars.inputPayload.message splitBy(/[,]/))[1])&#10;var number = trim((vars.inputPayload.message splitBy(/[,]/))[2])&#10;---&#10;(sizeOf(vars.inputPayload.message splitBy(/[,]/)) == 3) &#10;and isAlpha(symbol) and isNumeric(price) and isNumeric((number as String) replace /[.]/ with "")]'>
				<try doc:name="Try" doc:id="10496ff3-1de8-4128-a019-53ffd256b030" >
					<http:request method="GET" doc:name="checkIfCryptocurrencyExists" doc:id="71795432-eb23-4f47-8200-d8e81208de39" config-ref="HTTPS_Request_to_cryptocurrency_system_API_configuration" path="/cryptocurrency">
					<http:query-params><![CDATA[#[output application/java
---
{
	symbol: trim((vars.inputPayload.message splitBy(/[,]/))[0])
}]]]></http:query-params>
				</http:request>
					<error-handler >
						<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="1223c4a3-5393-4c6f-aefc-ce5bbbbc1952" type="HTTP:BAD_REQUEST">
							<http:request method="POST" doc:name="cryptocurrencyDoesn'tExistOrNotInFirst1kInCoinMarketCap" doc:id="4cd75788-fe13-4b98-8886-4be0f23bb709" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage" >
								<http:body ><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: "Sorry, but wrote by you cryptocurrency or doesn't exist or isn't in first 1k of coinMarketCap list"
}]]]></http:body>
							</http:request>
						</on-error-propagate>
					</error-handler>
				</try>
				<os:retrieve doc:name="setUserCryptocurrencyListVar" doc:id="1bf3232d-b430-4562-ab0f-c13eac281920" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForCryptocurrencies" target="userCryptocurrencyList">
					<os:default-value ><![CDATA[#[output application/json
---
[]]]]></os:default-value>
				</os:retrieve>
				<os:store doc:name="storeUserCryptocurrencies" doc:id="c4a46ae4-b403-4515-8ea8-ba037f4a1855" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForCryptocurrencies">
					<os:value><![CDATA[#[import * from dw::core::Strings
var symbol = trim((vars.inputPayload.message splitBy(/[,]/))[0])
var price = trim((vars.inputPayload.message splitBy(/[,]/))[1])
var number = trim((vars.inputPayload.message splitBy(/[,]/))[2])
output application/json
---
vars.userCryptocurrencyList as Array +
	{
		'symbol': upper(symbol),
	    'userPrice': price ++ "\$",
	    'number': number
	}]]]></os:value>
				</os:store>
				<http:request method="POST" doc:name="orAddOneMoreCryptocurrencyOrSetNotificationTime" doc:id="0cccca5e-d204-441f-b58a-05d7cf734c57" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'Would you like to add one more cryptocurrency or set notification time? (You can add more cryptocurrencies later, just press /changecryptocurrency in menu)',
	buttons: 'add',
	keys: ['Add one more cryptocurrency', 'Set notification time']
}]]]></http:body>
				</http:request>
			</when>
			<when expression="#[//Add one more cryptocurrency&#10;vars.inputPayload.message == 'Add one more cryptocurrency']">
				<http:request method="POST" doc:name="pleaseWriteCryptocurrencySymbolAnd...AndDeleteKeyboard" doc:id="9f69e93a-ef6c-4929-88e8-78bd945678d3" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'please write one cryptocurrency symbol about which you want to get notifications, and the price you bought it for, and number of cryptocurrencies separated by comma as in the example: BTC, 16000, 1.642657',
	buttons: 'delete'
}]]]></http:body>
				</http:request>
			</when>
			<when expression="#[//Set notification time&#10;vars.inputPayload.message == 'Set notification time']">
				<http:request method="POST" doc:name="askUserChooseDays" doc:id="e4311710-e132-466e-b4a4-91e2d88c4a02" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'please choose days when you want to get notification. You can choose one or more days. After you did it, press "Set hours for notifications"',
	buttons: 'add',
	keys: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Set hours for notifications'],
	keysInRow: 2
}]]]></http:body>
				</http:request>
			</when>
			<when expression="#[//set day&#10;['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] contains vars.inputPayload.message]">
				<os:retrieve doc:name="setUserDaysVar" doc:id="c977129f-a74f-4baf-9cff-1af96ddcff85" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForDays" target="userDays">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<os:store doc:name="storeUserDaysForNotification" doc:id="c62dda17-5cb3-448b-8d18-c0ea81c4328d" key="#[vars.inputPayload.identifier]">
					<os:value><![CDATA[#[(vars.userDays as Array + vars.inputPayload.message) distinctBy ((item, index) -> item)]]]></os:value>
				</os:store>
			</when>
			<when expression="#[//Set hours for notifications&#10;vars.inputPayload.message == 'Set hours for notifications']">
				<http:request method="POST" doc:name="askUserChooseHours" doc:id="3c230df3-5824-4532-a00b-5109e93db016" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'please choose time during day when you want to get notification. You can choose one or more hours. After you did it, press "Check time for notification"',
	buttons: 'add',
	keys: ["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00",
 "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00",
 "19:00", "20:00", "21:00", "22:00", "23:00", "Check time for notification"],
	keysInRow: 4
}]]]></http:body>
				</http:request>
			</when>
			<when expression='#[//set hours&#10;["00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00",&#10; "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00",&#10; "19:00", "20:00", "21:00", "22:00", "23:00"] contains vars.inputPayload.message]'>
				<os:contains doc:name="setUserHoursVar" doc:id="2c23ac51-f760-4537-9979-efa175eba56d" key="#[vars.inputPayload.identifier]" target="userHours" objectStore="objectStoreForHours"/>
				<os:store doc:name="storeUserHoursForNotification" doc:id="b541fde8-093a-4b65-9114-dbdb5d0e359c" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForHours">
					<os:value ><![CDATA[#[(vars.userHours as Array + vars.inputPayload.message) distinctBy ((item, index) -> item)]]]></os:value>
				</os:store>
			</when>
			<when expression="#[//Check time for notification&#10;vars.inputPayload.message == 'Check time for notification']">
				<os:retrieve doc:name="setUserDaysForNotificationVar" doc:id="a04d5a79-47d2-4949-94df-df01a0c67592" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForDays" target="userDaysForNotification">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<os:retrieve doc:name="setUserHoursForNotificationVar" doc:id="b1ecbd7a-ed04-48f2-9940-68a7ed180498" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForHours" target="userHoursForNotification">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<ee:transform doc:name="prepareUserTimeAndCoercingToString" doc:id="8ef7a389-ce04-4d6b-9e01-6180923be60d">
					<ee:message>
						<ee:set-payload><![CDATA['Please check the time when you want to get notifications'
	++ "You will get notification every: " ++ (payload.days joinBy ", ")
	 ++ " at " ++ (payload.hours joinBy ", ")]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<http:request method="POST" doc:name="askUserToCheckTime" doc:id="75b432e8-b6ef-4dda-a754-a33ca07f4454" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage">
					<http:body><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: payload,
	buttons: 'add',
	keys: ['This time is correct', 'I want to change time']
}]]]></http:body>
				</http:request>
			</when>
			<when expression="#[//This time is correct&#10;vars.inputPayload.message == 'This time is correct']">
				<os:retrieve doc:name="setUserCrytpocurrencyListVar" doc:id="17494e0e-62aa-46de-a9fb-97f2488ff47c" key="#[vars.inputPayload.identifier]" target="userCrytpocurrencyList" objectStore="objectStoreForCryptocurrencies">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<os:retrieve doc:name="setUserDaysListVar" doc:id="a46aa053-7394-4e88-b7b7-cea0ec9b0add" key="#[vars.inputPayload.identifier]" target="UserDaysList" objectStore="objectStoreForDays">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<os:retrieve doc:name="setUserHoursListVar" doc:id="4d841a40-7e8b-46d3-8d46-d2b6a115a59e" key="#[vars.inputPayload.identifier]" objectStore="objectStoreForHours" target="userHoursList">
					<os:default-value ><![CDATA[#[[]]]]></os:default-value>
				</os:retrieve>
				<validation:is-true doc:name="ifAllnecessaryUserDataIsPresent" doc:id="6de4c3b2-25b0-4d1c-9d83-e3f41584a878" expression="#[!isEmpty(vars.userCrytpocurrencyList) and !isEmpty(vars.UserDaysList) and !isEmpty(vars.userHoursList)]" message="There last too much time after your last activity, please try to subscribe one more time"/>
				<http:request method="POST" doc:name="subscribeRequestToNotificationAPI" doc:id="40126b97-8f93-4234-bc0e-950550417ff5" config-ref="HTTP_Request_configuration_to_notification_process_API" path="/subscribe">
					<http:body><![CDATA[#[output application/json
var messenger = vars.inputPayload.messenger
---
{
  subscribedIn:{
    '$(messenger)': vars.inputPayload.identifier
  },
  notifyAt:{
    period: "d",
    inDays: vars.UserDaysList,
    atTime: vars.userHoursList
  },
  cryptocurrencies: vars.userCrytpocurrencyList
}]]]></http:body>
				</http:request>
				<http:request method="POST" doc:name="notifyThatUserIsSubscribedAndDeleteKeyboard" doc:id="057fff58-fd6c-4d57-9be3-6e703d079ec8" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage" >
					<http:body ><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'You are subscribed now',
	buttons: 'delete'
}]]]></http:body>
				</http:request>
			</when>
			<otherwise >
				<http:request method="POST" doc:name="askUserToFollowInstructions" doc:id="692b04a2-1583-4fc7-aa15-89fcb4caa66e" config-ref="HTTPS_Request_configuration_to_telegram_system_API" path="/sendMessage" >
					<http:body ><![CDATA[#[{
	identifier: vars.inputPayload.identifier,
	message: 'Please, follow the instructions'
}]]]></http:body>
				</http:request>
			</otherwise>
		</choice>
		<set-payload value="#[output application/json&#10;---&#10;{&#10;	message: 'message was processed successfully'&#10;}]" doc:name="setUsualPayload" doc:id="edd310ff-882c-4358-af92-da07c2cb2157" />
	</sub-flow>
</mule>
